name: Prod front configuration
'on':
  push:
    branches:
      - main
    paths:
      - app/frontend/front-release
jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set env vars
  #       run: >
  #         if [ $GITHUB_REF_NAME = 'main' ]
  #           then echo "namespace=prod" >> $GITHUB_ENV
  #           else echo "namespace=dev" >> $GITHUB_ENV
  #         fi

  #         echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

  #     - name: Check out code
  #       uses: actions/checkout@v2
  #       with:
  #       # Disabling shallow clone is recommended for improving relevancy of reporting
  #        fetch-depth: 0
    
      # #Sonar
      # # - name: SonarCloud Scan
      # #   uses: SonarSource/sonarcloud-github-action@master
      # #     with:
      # #         projectBaseDir: my-custom-directory
      # #     env:
      # #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      # #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      # #Frontend verion from file
      # - name: Read frontend version
      #   id: getversion
      #   run: echo "::set-output name=version::$(cat app/frontend/front-release)"
      
      # #aws
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
      #     aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
      #     aws-region: '${{ secrets.MY_AWS_REGION }}'

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: 'Build, tag, and push image to Amazon ECR'
      #   env:
      #     ECR_REGISTRY: '${{ steps.login-ecr.outputs.registry }}'
      #     ECR_REPOSITORY: 'frontend-diploma'
      #     IMAGE_TAG: '${{ env.GITHUB_SHA_SHORT }}'
      #   run: |
      #     docker image build \
      #      --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
      #      --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
      #      --tag $ECR_REGISTRY/$ECR_REPOSITORY:v${{ steps.getversion.outputs.version }} \
      #      app/frontend --no-cache
      #      docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      #      docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #      docker push $ECR_REGISTRY/$ECR_REPOSITORY:v${{ steps.getversion.outputs.version }}

  configure:
    runs-on: ubuntu-latest
   # needs: build

    steps:
    - name: Set env vars
      run: >
          if [ $GITHUB_REF_NAME = 'main' ]
            then echo "namespace=prod" >> $GITHUB_ENV
            else echo "namespace=dev" >> $GITHUB_ENV
          fi
    - name: Check out code
      uses: actions/checkout@v2

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v1

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #       aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
    #       aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
    #       aws-region: '${{ secrets.MY_AWS_REGION }}'
 
    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    - name: Read frontend version
      id: getversion
      run: echo "::set-output name=version::$(cat app/frontend/front-release)"

    - name: Update Kubernetes resources
      env:
        ECR_REGISTRY: '${{ steps.login-ecr.outputs.registry }}'
        ECR_REPOSITORY: 'frontend-diploma'
        IMAGE_TAG: '${{ env.GITHUB_SHA_SHORT }}'
      run: |
       cd kustomize/overlays/${{ env.namespace }}/frontend
       kustomize edit set image $ECR_REGISTRY/$ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:v${{ steps.getversion.outputs.version }}
       kustomize edit set namespace ${{ env.namespace }}
       cat kustomization.yaml
        
    - name: Commit files
      run: |
        git pull
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "update deployment verion"

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build


      # - name: Get AWS cluster name
      #   run:  echo "cluster_name=$(aws eks list-clusters --output json | jq -r '.clusters[]')" >> $GITHUB_ENV
        

      # - name: Update kubeconfig
      #   run: aws eks update-kubeconfig --name ${{ env.cluster_name }}

      # - name: Install and configure kubectl
      #   run: >
      #     VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)

      #     curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
      #         --progress-bar \
      #         --location \
      #         --remote-name
      #     chmod +x kubectl

      #     sudo mv kubectl /usr/local/bin/

      #     echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
