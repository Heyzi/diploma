name: CI\CD backend
'on':
  push:
    branches:
      - development
      - main
    paths:
      - app/backend/*
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set env vars
        run: >
          if [ $GITHUB_REF_NAME = 'main' ]
            then echo "namespace=prod" >> $GITHUB_ENV
            else echo "namespace=dev" >> $GITHUB_ENV
          fi

          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

      - name: Check out code
        uses: actions/checkout@v2

      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            
      - name: Read backend version
        id: getversion
        run: echo "::set-output name=version::$(cat app/backend/pyapp-release)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ secrets.MY_AWS_REGION }}'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 'Build, tag, and push image to Amazon ECR'
        env:
          ECR_REGISTRY: '${{ steps.login-ecr.outputs.registry }}'
          ECR_REPOSITORY: '${{ env.namespace }}-backend-diploma'
          IMAGE_TAG: '${{ env.GITHUB_SHA_SHORT }}'
        run: |
          docker image build \
           --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
           --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
           --tag $ECR_REGISTRY/$ECR_REPOSITORY:v${{ steps.getversion.outputs.version }} \
           app/backend --no-cache
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:v${{ steps.getversion.outputs.version }}

      # - name: Get AWS cluster name
      #   run:  echo "cluster_name=$(aws eks list-clusters --output json | jq -r '.clusters[]')" >> $GITHUB_ENV
      # - name: Update Minor version
      #   uses: hmanzur/actions-set-secret@v2.0.0
      #   with:
      #    name: 'MINOR'
      #    value: $((${{ secrets.MINOR }}+1))
      #    repository: Heyzi/MasterReport
      #    token: ${{ secrets.REPO_ACCESS_TOKEN }}      

      # - name: Update kubeconfig
      #   run: aws eks update-kubeconfig --name ${{ env.cluster_name }}
