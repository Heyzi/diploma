name: CI\CD frontend
on:
  push:
    branches:
      - development
      - main
    paths:
      - app/frontend/*
jobs:
  build-and-deploy:
    runs-on: ubuntu-20.04
    steps:

    - name: Set env vars
      run: |
        if [ $GITHUB_REF_NAME = 'main' ]
          then echo "namespace=prod" >> $GITHUB_ENV
          else echo "namespace=dev" >> $GITHUB_ENV
        fi
        echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:  ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.namespace }}-frontend-diploma
        IMAGE_TAG: ${{ env.GITHUB_SHA_SHORT }}
      run: |
           docker image build \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            app/frontend --no-cache
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Install and configure kubectl
      run: |
          VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
              --progress-bar \
              --location \
              --remote-name
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
          echo kubeconfig.yaml | base64
    # - name: Deploy
    #   env:
    #    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #   run: |
    #       export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
    #       export IMAGE_TAG=${{ env.SHORT_SHA }}
    #       export KUBECONFIG=kubeconfig.yaml
    #       envsubst < k8s/kustomization.tmpl.yaml > k8s/kustomization.yaml
    #       kubectl kustomize k8s | kubectl apply -f -